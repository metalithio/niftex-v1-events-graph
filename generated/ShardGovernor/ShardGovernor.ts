// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewShotgun extends ethereum.Event {
  get params(): NewShotgun__Params {
    return new NewShotgun__Params(this);
  }
}

export class NewShotgun__Params {
  _event: NewShotgun;

  constructor(event: NewShotgun) {
    this._event = event;
  }

  get shotgun(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NftRedeemed extends ethereum.Event {
  get params(): NftRedeemed__Params {
    return new NftRedeemed__Params(this);
  }
}

export class NftRedeemed__Params {
  _event: NftRedeemed;

  constructor(event: NftRedeemed) {
    this._event = event;
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ShardsClaimed extends ethereum.Event {
  get params(): ShardsClaimed__Params {
    return new ShardsClaimed__Params(this);
  }
}

export class ShardsClaimed__Params {
  _event: ShardsClaimed;

  constructor(event: ShardsClaimed) {
    this._event = event;
  }

  get claimant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shardAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ShardsCollected extends ethereum.Event {
  get params(): ShardsCollected__Params {
    return new ShardsCollected__Params(this);
  }
}

export class ShardsCollected__Params {
  _event: ShardsCollected;

  constructor(event: ShardsCollected) {
    this._event = event;
  }

  get collector(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shardAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shotgun(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ShotgunEnacted extends ethereum.Event {
  get params(): ShotgunEnacted__Params {
    return new ShotgunEnacted__Params(this);
  }
}

export class ShotgunEnacted__Params {
  _event: ShotgunEnacted;

  constructor(event: ShotgunEnacted) {
    this._event = event;
  }

  get enactor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ShardGovernor extends ethereum.SmartContract {
  static bind(address: Address): ShardGovernor {
    return new ShardGovernor("ShardGovernor", address);
  }

  checkLock(): boolean {
    let result = super.call("checkLock", "checkLock():(bool)", []);

    return result[0].toBoolean();
  }

  try_checkLock(): ethereum.CallResult<boolean> {
    let result = super.tryCall("checkLock", "checkLock():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkShotgunState(): boolean {
    let result = super.call(
      "checkShotgunState",
      "checkShotgunState():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_checkShotgunState(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkShotgunState",
      "checkShotgunState():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currentShotgunClause(): Address {
    let result = super.call(
      "currentShotgunClause",
      "currentShotgunClause():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_currentShotgunClause(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "currentShotgunClause",
      "currentShotgunClause():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getContractBalance(): BigInt {
    let result = super.call(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getContractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNftRegistryAddresses(): Array<Address> {
    let result = super.call(
      "getNftRegistryAddresses",
      "getNftRegistryAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getNftRegistryAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getNftRegistryAddresses",
      "getNftRegistryAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getNftTokenIds(): Array<BigInt> {
    let result = super.call(
      "getNftTokenIds",
      "getNftTokenIds():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getNftTokenIds(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getNftTokenIds",
      "getNftTokenIds():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  offererAddress(): Address {
    let result = super.call("offererAddress", "offererAddress():(address)", []);

    return result[0].toAddress();
  }

  try_offererAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "offererAddress",
      "offererAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  shardOfferingAddress(): Address {
    let result = super.call(
      "shardOfferingAddress",
      "shardOfferingAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_shardOfferingAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "shardOfferingAddress",
      "shardOfferingAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shardRegistryAddress(): Address {
    let result = super.call(
      "shardRegistryAddress",
      "shardRegistryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_shardRegistryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "shardRegistryAddress",
      "shardRegistryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shotgunAddressArray(): Array<Address> {
    let result = super.call(
      "shotgunAddressArray",
      "shotgunAddressArray():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_shotgunAddressArray(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "shotgunAddressArray",
      "shotgunAddressArray():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  shotgunCounter(): BigInt {
    let result = super.call("shotgunCounter", "shotgunCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_shotgunCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shotgunCounter",
      "shotgunCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get nftRegistryAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get offererAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get niftexWalletAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get artistWalletAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class CheckOfferingAndIssueCall extends ethereum.Call {
  get inputs(): CheckOfferingAndIssueCall__Inputs {
    return new CheckOfferingAndIssueCall__Inputs(this);
  }

  get outputs(): CheckOfferingAndIssueCall__Outputs {
    return new CheckOfferingAndIssueCall__Outputs(this);
  }
}

export class CheckOfferingAndIssueCall__Inputs {
  _call: CheckOfferingAndIssueCall;

  constructor(call: CheckOfferingAndIssueCall) {
    this._call = call;
  }
}

export class CheckOfferingAndIssueCall__Outputs {
  _call: CheckOfferingAndIssueCall;

  constructor(call: CheckOfferingAndIssueCall) {
    this._call = call;
  }
}

export class ClaimInitialShotgunCall extends ethereum.Call {
  get inputs(): ClaimInitialShotgunCall__Inputs {
    return new ClaimInitialShotgunCall__Inputs(this);
  }

  get outputs(): ClaimInitialShotgunCall__Outputs {
    return new ClaimInitialShotgunCall__Outputs(this);
  }
}

export class ClaimInitialShotgunCall__Inputs {
  _call: ClaimInitialShotgunCall;

  constructor(call: ClaimInitialShotgunCall) {
    this._call = call;
  }

  get initialClaimantAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialClaimantBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimInitialShotgunCall__Outputs {
  _call: ClaimInitialShotgunCall;

  constructor(call: ClaimInitialShotgunCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DeploySubcontractsCall extends ethereum.Call {
  get inputs(): DeploySubcontractsCall__Inputs {
    return new DeploySubcontractsCall__Inputs(this);
  }

  get outputs(): DeploySubcontractsCall__Outputs {
    return new DeploySubcontractsCall__Outputs(this);
  }
}

export class DeploySubcontractsCall__Inputs {
  _call: DeploySubcontractsCall;

  constructor(call: DeploySubcontractsCall) {
    this._call = call;
  }

  get liqProviderCutInShards(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get artistCutInShards(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pricePerShardInWei(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get shardAmountOffered(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get offeringDeadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get cap(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[6].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[7].value.toString();
  }

  get shotgunDisabled(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }

  get factoryAddress(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class DeploySubcontractsCall__Outputs {
  _call: DeploySubcontractsCall;

  constructor(call: DeploySubcontractsCall) {
    this._call = call;
  }
}

export class EnactShotgunCall extends ethereum.Call {
  get inputs(): EnactShotgunCall__Inputs {
    return new EnactShotgunCall__Inputs(this);
  }

  get outputs(): EnactShotgunCall__Outputs {
    return new EnactShotgunCall__Outputs(this);
  }
}

export class EnactShotgunCall__Inputs {
  _call: EnactShotgunCall;

  constructor(call: EnactShotgunCall) {
    this._call = call;
  }
}

export class EnactShotgunCall__Outputs {
  _call: EnactShotgunCall;

  constructor(call: EnactShotgunCall) {
    this._call = call;
  }
}

export class MintReservedShardsCall extends ethereum.Call {
  get inputs(): MintReservedShardsCall__Inputs {
    return new MintReservedShardsCall__Inputs(this);
  }

  get outputs(): MintReservedShardsCall__Outputs {
    return new MintReservedShardsCall__Outputs(this);
  }
}

export class MintReservedShardsCall__Inputs {
  _call: MintReservedShardsCall;

  constructor(call: MintReservedShardsCall) {
    this._call = call;
  }

  get _beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintReservedShardsCall__Outputs {
  _call: MintReservedShardsCall;

  constructor(call: MintReservedShardsCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PullLiquidityCall extends ethereum.Call {
  get inputs(): PullLiquidityCall__Inputs {
    return new PullLiquidityCall__Inputs(this);
  }

  get outputs(): PullLiquidityCall__Outputs {
    return new PullLiquidityCall__Outputs(this);
  }
}

export class PullLiquidityCall__Inputs {
  _call: PullLiquidityCall;

  constructor(call: PullLiquidityCall) {
    this._call = call;
  }

  get exchangeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liqProvAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get uniTokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get minEth(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get minTokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class PullLiquidityCall__Outputs {
  _call: PullLiquidityCall;

  constructor(call: PullLiquidityCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class TransferShardsCall extends ethereum.Call {
  get inputs(): TransferShardsCall__Inputs {
    return new TransferShardsCall__Inputs(this);
  }

  get outputs(): TransferShardsCall__Outputs {
    return new TransferShardsCall__Outputs(this);
  }
}

export class TransferShardsCall__Inputs {
  _call: TransferShardsCall;

  constructor(call: TransferShardsCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferShardsCall__Outputs {
  _call: TransferShardsCall;

  constructor(call: TransferShardsCall) {
    this._call = call;
  }
}
