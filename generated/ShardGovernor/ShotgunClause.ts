// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Countercommit extends ethereum.Event {
  get params(): Countercommit__Params {
    return new Countercommit__Params(this);
  }
}

export class Countercommit__Params {
  _event: Countercommit;

  constructor(event: Countercommit) {
    this._event = event;
  }

  get committer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get weiAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EtherCollected extends ethereum.Event {
  get params(): EtherCollected__Params {
    return new EtherCollected__Params(this);
  }
}

export class EtherCollected__Params {
  _event: EtherCollected;

  constructor(event: EtherCollected) {
    this._event = event;
  }

  get collector(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get weiAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ShotgunClause extends ethereum.SmartContract {
  static bind(address: Address): ShotgunClause {
    return new ShotgunClause("ShotgunClause", address);
  }

  deadlineTimestamp(): BigInt {
    let result = super.call(
      "deadlineTimestamp",
      "deadlineTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_deadlineTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deadlineTimestamp",
      "deadlineTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shotgunEnacted(): boolean {
    let result = super.call("shotgunEnacted", "shotgunEnacted():(bool)", []);

    return result[0].toBoolean();
  }

  try_shotgunEnacted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("shotgunEnacted", "shotgunEnacted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initialClaimantAddress(): Address {
    let result = super.call(
      "initialClaimantAddress",
      "initialClaimantAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_initialClaimantAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "initialClaimantAddress",
      "initialClaimantAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  initialClaimantBalance(): BigInt {
    let result = super.call(
      "initialClaimantBalance",
      "initialClaimantBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_initialClaimantBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initialClaimantBalance",
      "initialClaimantBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialOfferInWei(): BigInt {
    let result = super.call(
      "initialOfferInWei",
      "initialOfferInWei():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_initialOfferInWei(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initialOfferInWei",
      "initialOfferInWei():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pricePerShardInWei(): BigInt {
    let result = super.call(
      "pricePerShardInWei",
      "pricePerShardInWei():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_pricePerShardInWei(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pricePerShardInWei",
      "pricePerShardInWei():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimWinner(): i32 {
    let result = super.call("claimWinner", "claimWinner():(uint8)", []);

    return result[0].toI32();
  }

  try_claimWinner(): ethereum.CallResult<i32> {
    let result = super.tryCall("claimWinner", "claimWinner():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  counterclaimants(): Array<Address> {
    let result = super.call(
      "counterclaimants",
      "counterclaimants():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_counterclaimants(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "counterclaimants",
      "counterclaimants():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getCounterclaimantContribution(counterclaimant: Address): BigInt {
    let result = super.call(
      "getCounterclaimantContribution",
      "getCounterclaimantContribution(address):(uint256)",
      [ethereum.Value.fromAddress(counterclaimant)]
    );

    return result[0].toBigInt();
  }

  try_getCounterclaimantContribution(
    counterclaimant: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCounterclaimantContribution",
      "getCounterclaimantContribution(address):(uint256)",
      [ethereum.Value.fromAddress(counterclaimant)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  counterWeiContributed(): BigInt {
    let result = super.call(
      "counterWeiContributed",
      "counterWeiContributed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_counterWeiContributed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "counterWeiContributed",
      "counterWeiContributed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContractBalance(): BigInt {
    let result = super.call(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getContractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shardGovernor(): Address {
    let result = super.call("shardGovernor", "shardGovernor():(address)", []);

    return result[0].toAddress();
  }

  try_shardGovernor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "shardGovernor",
      "shardGovernor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRequiredWeiForCounterclaim(): BigInt {
    let result = super.call(
      "getRequiredWeiForCounterclaim",
      "getRequiredWeiForCounterclaim():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRequiredWeiForCounterclaim(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRequiredWeiForCounterclaim",
      "getRequiredWeiForCounterclaim():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialClaimantAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialClaimantBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get shardRegistryAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CounterCommitEtherCall extends ethereum.Call {
  get inputs(): CounterCommitEtherCall__Inputs {
    return new CounterCommitEtherCall__Inputs(this);
  }

  get outputs(): CounterCommitEtherCall__Outputs {
    return new CounterCommitEtherCall__Outputs(this);
  }
}

export class CounterCommitEtherCall__Inputs {
  _call: CounterCommitEtherCall;

  constructor(call: CounterCommitEtherCall) {
    this._call = call;
  }
}

export class CounterCommitEtherCall__Outputs {
  _call: CounterCommitEtherCall;

  constructor(call: CounterCommitEtherCall) {
    this._call = call;
  }
}

export class CollectEtherProceedsCall extends ethereum.Call {
  get inputs(): CollectEtherProceedsCall__Inputs {
    return new CollectEtherProceedsCall__Inputs(this);
  }

  get outputs(): CollectEtherProceedsCall__Outputs {
    return new CollectEtherProceedsCall__Outputs(this);
  }
}

export class CollectEtherProceedsCall__Inputs {
  _call: CollectEtherProceedsCall;

  constructor(call: CollectEtherProceedsCall) {
    this._call = call;
  }

  get balance(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get caller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CollectEtherProceedsCall__Outputs {
  _call: CollectEtherProceedsCall;

  constructor(call: CollectEtherProceedsCall) {
    this._call = call;
  }
}

export class CollectShardProceedsCall extends ethereum.Call {
  get inputs(): CollectShardProceedsCall__Inputs {
    return new CollectShardProceedsCall__Inputs(this);
  }

  get outputs(): CollectShardProceedsCall__Outputs {
    return new CollectShardProceedsCall__Outputs(this);
  }
}

export class CollectShardProceedsCall__Inputs {
  _call: CollectShardProceedsCall;

  constructor(call: CollectShardProceedsCall) {
    this._call = call;
  }
}

export class CollectShardProceedsCall__Outputs {
  _call: CollectShardProceedsCall;

  constructor(call: CollectShardProceedsCall) {
    this._call = call;
  }
}

export class EnactShotgunCall extends ethereum.Call {
  get inputs(): EnactShotgunCall__Inputs {
    return new EnactShotgunCall__Inputs(this);
  }

  get outputs(): EnactShotgunCall__Outputs {
    return new EnactShotgunCall__Outputs(this);
  }
}

export class EnactShotgunCall__Inputs {
  _call: EnactShotgunCall;

  constructor(call: EnactShotgunCall) {
    this._call = call;
  }
}

export class EnactShotgunCall__Outputs {
  _call: EnactShotgunCall;

  constructor(call: EnactShotgunCall) {
    this._call = call;
  }
}
