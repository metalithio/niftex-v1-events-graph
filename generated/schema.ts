// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Shotgun extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Shotgun entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Shotgun entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Shotgun", id.toString(), this);
  }

  static load(id: string): Shotgun | null {
    return store.get("Shotgun", id) as Shotgun | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get shardRegistry(): Bytes {
    let value = this.get("shardRegistry");
    return value.toBytes();
  }

  set shardRegistry(value: Bytes) {
    this.set("shardRegistry", Value.fromBytes(value));
  }

  get initialClaimant(): Bytes {
    let value = this.get("initialClaimant");
    return value.toBytes();
  }

  set initialClaimant(value: Bytes) {
    this.set("initialClaimant", Value.fromBytes(value));
  }

  get totalValue(): BigInt {
    let value = this.get("totalValue");
    return value.toBigInt();
  }

  set totalValue(value: BigInt) {
    this.set("totalValue", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get pricePerShardInEth(): BigDecimal {
    let value = this.get("pricePerShardInEth");
    return value.toBigDecimal();
  }

  set pricePerShardInEth(value: BigDecimal) {
    this.set("pricePerShardInEth", Value.fromBigDecimal(value));
  }

  get valuationInEth(): BigDecimal {
    let value = this.get("valuationInEth");
    return value.toBigDecimal();
  }

  set valuationInEth(value: BigDecimal) {
    this.set("valuationInEth", Value.fromBigDecimal(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get enacted(): boolean {
    let value = this.get("enacted");
    return value.toBoolean();
  }

  set enacted(value: boolean) {
    this.set("enacted", Value.fromBoolean(value));
  }

  get winner(): string {
    let value = this.get("winner");
    return value.toString();
  }

  set winner(value: string) {
    this.set("winner", Value.fromString(value));
  }
}
